import{_ as i,c as a,a as e,o as t}from"./app-Boikxu3H.js";const n={};function h(l,s){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="使用-database-作为缓存" tabindex="-1"><a class="header-anchor" href="#使用-database-作为缓存"><span>使用 Database 作为缓存</span></a></h2><p>在Windows环境下开发Django项目时，缓存是一个令人十分头疼的问题。使用内存模式的话，每次重新加载缓存都会丢失，而要是使用Redis等还需要另起Docker，让不富裕的电脑性能雪上加霜。</p><p>这个时候，其实把缓存放在数据库中是一个不错的选择，具体配置如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">CACHES</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">default</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">BACKEND</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">django.core.cache.backends.db.DatabaseCache</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LOCATION</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my_cache_table</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 缓存表的名字</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意一点：<strong>我们需要手动运行下面的命令创建缓存表</strong>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> manage.py</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> createcachetable</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my_cache_table</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6)])])}const r=i(n,[["render",h]]),k=JSON.parse('{"path":"/article/th7tsaev/","title":"Django 小众问题集合","lang":"zh-CN","frontmatter":{"title":"Django 小众问题集合","createTime":"2024/05/17 15:13:00","tags":["后端"],"permalink":"/article/th7tsaev/","description":"使用 Database 作为缓存 在Windows环境下开发Django项目时，缓存是一个令人十分头疼的问题。使用内存模式的话，每次重新加载缓存都会丢失，而要是使用Redis等还需要另起Docker，让不富裕的电脑性能雪上加霜。 这个时候，其实把缓存放在数据库中是一个不错的选择，具体配置如下： 这里需要注意一点：我们需要手动运行下面的命令创建缓存表。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django 小众问题集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-10T04:50:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://yxzl.dev/article/th7tsaev/"}],["meta",{"property":"og:site_name","content":"异想之旅のBlog"}],["meta",{"property":"og:title","content":"Django 小众问题集合"}],["meta",{"property":"og:description","content":"使用 Database 作为缓存 在Windows环境下开发Django项目时，缓存是一个令人十分头疼的问题。使用内存模式的话，每次重新加载缓存都会丢失，而要是使用Redis等还需要另起Docker，让不富裕的电脑性能雪上加霜。 这个时候，其实把缓存放在数据库中是一个不错的选择，具体配置如下： 这里需要注意一点：我们需要手动运行下面的命令创建缓存表。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T04:50:50.000Z"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2025-10-10T04:50:50.000Z"}]]},"git":{"createdTime":1758874804000,"updatedTime":1760071850000},"autoDesc":true,"filePathRelative":"tech/django-notes.md","headers":[]}');export{r as comp,k as data};
